# -*- coding: utf-8 -*-
"""store contacts .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MdtahqYk0bpnsb4Bjstsoc0sWWlTd-bO
"""

# Contact Management System
# Global list to store contacts
contacts = []
# Contact structure
class Contact:
    def __init__(self, store_name, phone_number, email, address):
        self.store_name = store_name
        self.phone_number = phone_number
        self.email = email
        self.address = address
    def __str__(self):
        return f"Store Name: {self.store_name}\nPhone Number: {self.phone_number}\nEmail: {self.email}\nAddress: {self.address}"

# Add a new contact
def add_contact():
    store_name = input("Enter store name: ")
    phone_number = input("Enter phone number: ")
    email = input("Enter email address: ")
    address = input("Enter physical address: ")
    new_contact = Contact(store_name, phone_number, email, address)
    contacts.append(new_contact)
    print("\nContact added successfully!\n")

# View all contacts
def view_contacts():
    if not contacts:
        print("\nNo contacts available.\n")
    else:
        print("\nContact List:")
        for i, contact in enumerate(contacts):
            print(f"{i + 1}. {contact.store_name} - {contact.phone_number}")
        print("\n")
# Search for a contact by name or phone number
def search_contact():
    query = input("Enter name or phone number to search: ")
    found = False
    for contact in contacts:
        if query.lower() in contact.store_name.lower() or query in contact.phone_number:
            print(f"\nContact Found:\n{contact}")
            found = True
            break
    if not found:
        print("\nNo contact found with that information.\n")
# Update a contact
def update_contact():
    view_contacts()
    try:
        contact_index = int(input("Enter the contact number you want to update: ")) - 1
        if 0 <= contact_index < len(contacts):
            contact = contacts[contact_index]
            print(f"\nUpdating Contact: {contact.store_name}")
            contact.store_name = input("Enter new store name: ")
            contact.phone_number = input("Enter new phone number: ")
            contact.email = input("Enter new email address: ")
            contact.address = input("Enter new physical address: ")
            print("\nContact updated successfully!\n")
        else:
            print("Invalid contact number!")
    except ValueError:
        print("Invalid input! Please enter a valid number.")
# Delete a contact
def delete_contact():
    view_contacts()
    try:
        contact_index = int(input("Enter the contact number you want to delete: ")) - 1
        if 0 <= contact_index < len(contacts):
            del contacts[contact_index]
            print("\nContact deleted successfully!\n")
        else:
            print("Invalid contact number!")
    except ValueError:
        print("Invalid input! Please enter a valid number.")
# User interface with menu options
def user_interface():
    while True:
        print("\nContact Management System")
        print("1. Add New Contact")
        print("2. View Contact List")
        print("3. Search Contact")
        print("4. Update Contact")
        print("5. Delete Contact")
        print("6. Exit")
        choice = input("Choose an option (1-6): ")

        if choice == '1':
            add_contact()
        elif choice == '2':
            view_contacts()
        elif choice == '3':
            search_contact()
        elif choice == '4':
            update_contact()
        elif choice == '5':
            delete_contact()
        elif choice == '6':
            print("Exiting the program. Goodbye!")
            break
        else:
            print("Invalid choice! Please select a valid option.")
# Run the contact management system
if __name__ == "__main__":
    user_interface()